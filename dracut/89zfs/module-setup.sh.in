#!/bin/sh

get_devtype() {
  local typ
  typ=$(udevadm info --query=property --name="$1" | grep "^ID_FS_TYPE=" | sed 's|^ID_FS_TYPE=||')
  if [ "$typ" = "" ] ; then
     typ=$(blkid -c /dev/null "$1" -o value -s TYPE)
  fi
  echo "$typ"
}

check() {
        local _dev
        local _devlinks
        local _devname
        local _devtype
        local _majmin
        local _slavemajmin
        local _x
        local rootzfsdev
        local rootpool

	# We depend on udev-rules being loaded
	[ "$1" = "-d" ] && return 0

	# Verify the zfs tool chain
	test -x @sbindir@/zpool || return 1
	test -x @sbindir@/zfs || return 1
	test -x @sbindir@/zdb || return 1

        # this following hack ensures that ZFS is included in host-only dracut initramfs
        # and also ensures that cryptsetup is included if the root pool is encrypted
        # by informing dracut that there are encrypted devices backing the root pool

        if [ ${#host_fs_types[@]} -gt 0 ] ; then

        # detect shitty dracut/bash
        shitty_dracut=0
        echo "${host_fs_types[@]}" | grep -q '|' && shitty_dracut=1

        # is the root FS a ZFS "device"?
        rootzfsdev=
        while read dev mntpnt type rest ; do
            if [ "$mntpnt" == "/" -a "$type" == "zfs" ] ; then
                rootzfsdev="$dev"
            fi
        done < /etc/mtab

        # if it is, then let's do this
        # complete host_devs and host_fs_types
        # before 90crypt has a chance to do its thing
        if [ -n "$rootzfsdev" ] ; then
            declare -a _devs
            if [ $shitty_dracut == 1 ] ; then
                push host_fs_types "$rootzfsdev|zfs"
            else
                host_fs_types["$rootzfsdev"]="zfs"
            fi
            rootpool=$(echo "$rootzfsdev" | cut -d / -f 1)

            # for each physical device in the root pool, add to list
            while read key rest ; do
                if [ "$key" == "path:" ] ; then
                    _dev=`eval echo $rest`
                    _devname=$(udevadm info --query=property --name="$_dev" | grep "^DEVNAME=" | sed 's|^DEVNAME=||')
                    _devs+=("$_devname")
                fi
            done < <(@sbindir@/zdb -C "$rootpool")

            # inspect the dev name according to udevadm
            # and also inspect the device type
            for _dev in "${_devs[@]}" ; do
                _devtype=$(get_devtype "$_dev")
                _majmin=$(get_maj_min "$_dev")

                push host_devs "$_dev"
                if [ $shitty_dracut == 1 ] ; then
                    push host_fs_types "$_dev|$_devtype"
                    push host_fs_types "$_majmin|$_devtype"
                else
                    host_fs_types["$_dev"]="$_devtype"
                    host_fs_types["$_majmin"]="$_devtype"
                fi

                # any slave device gets the same treatment
                # this is what discovers dm-crypt host devices
                if [[ -d /sys/dev/block/$_majmin/slaves ]] ; then
                    for _x in /sys/dev/block/$_majmin/slaves/*; do
                        [[ -f $_x/dev ]] || continue
                        _x=/dev/`basename "$_x"`
                        _devname=$(udevadm info --query=property --name="$_x" | grep "^DEVNAME=" | sed 's|^DEVNAME=||')
                        _devtype=$(get_devtype "$_devname")
                        _slavemajmin=$(get_maj_min "$_x")
                        push host_devs "$_devname"
                        if [ $shitty_dracut == 1 ] ; then
                            push host_fs_types "$_devname|$_devtype"
                            push host_fs_types "$_slavemajmin|$_devtype"
                        else
                            host_fs_types["$_devname"]="$_devtype"
                            host_fs_types["$_slavemajmin"]="$_devtype"
                        fi
                    done
                fi
            done

        fi

        fi

        [[ $hostonly ]] || [[ $mount_needs ]] && {
            for fs in "${host_fs_types[@]}"; do
                echo "$fs" | grep -q "zfs$" && return 0
            done
            return 255
        }

	return 0
}

depends() {
	echo udev-rules
	return 0
}

installkernel() {
	instmods zfs
	instmods zcommon
	instmods znvpair
	instmods zavl
	instmods zunicode
	instmods spl
	instmods zlib_deflate
	instmods zlib_inflate
}

install() {
	inst_rules @udevruledir@/90-zfs.rules
	inst_rules @udevruledir@/69-vdev.rules
	inst_rules @udevruledir@/60-zvol.rules
	dracut_install @sbindir@/zfs
	dracut_install @sbindir@/zpool
	dracut_install @udevdir@/vdev_id
	dracut_install @udevdir@/zvol_id
	dracut_install mount.zfs
	dracut_install hostid
	inst_hook cmdline 95 "$moddir/parse-zfs.sh"
	inst_hook mount 98 "$moddir/mount-zfs.sh"

	# theoretically this only belongs in the initramfs if it is hostonly
	if [ -e @sysconfdir@/zfs/zpool.cache ]; then
		firstpool=`@sbindir@/zpool list -H -o name | head -1 ; true`
		if [ "$firstpool" != "" ] ; then
			@sbindir@/zpool set cachefile=@sysconfdir@/zfs/zpool.cache "$firstpool"
		fi
		inst @sysconfdir@/zfs/zpool.cache
	fi

	# theoretically this only belongs in the initramfs if it is hostonly
	if [ -e @sysconfdir@/modprobe.d/zfs.conf ]; then
		inst @sysconfdir@/modprobe.d/zfs.conf
	fi

	# theoretically this only belongs in the initramfs if it is hostonly
	if [ -e @sysconfdir@/zfs/vdev_id.conf ]; then
		inst @sysconfdir@/vdev_id.conf
	fi

	# Synchronize initramfs and system hostid
	TMP=`mktemp`
	AA=`hostid | cut -b 1,2`
	BB=`hostid | cut -b 3,4`
	CC=`hostid | cut -b 5,6`
	DD=`hostid | cut -b 7,8`
	printf "\x$DD\x$CC\x$BB\x$AA" >$TMP
	inst_simple "$TMP" /etc/hostid
	rm "$TMP"
}

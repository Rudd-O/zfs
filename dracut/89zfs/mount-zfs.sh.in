#!/bin/sh

. /lib/dracut-lib.sh

ZPOOL_NOT_BY_ID=""

if getargbool 0 zfs_not_by_id -y zfs.not_by_id -y zfsnotbyid ; then
	warn "ZFS: Will import pools from devices in /dev rather than by ID."
	ZPOOL_NOT_BY_ID="-d /dev"
fi

case "$root" in
	zfs:*)
		# We have ZFS modules loaded, so we're able to import pools now.
		if [ "$root" = "zfs:AUTO" ] ; then
			# Need to parse bootfs attribute
			info "ZFS: Attempting to detect root from imported ZFS pools."

			# Might be imported by the kernel module, so try searching before
			# we import anything.
			zfsbootfs=`zpool list -H -o bootfs | sed -n '/-/ !p' | sed 'q'`
			if [ "$?" != "0" ] || [ "$zfsbootfs" = "" ] || \
				[ "$zfsbootfs" = "no pools available" ] ; then
				# Not there, so we need to import everything.
				info "ZFS: Attempting to import additional pools."
				zpool import -N -a -f ${ZPOOL_NOT_BY_ID}
				zfsbootfs=`zpool list -H -o bootfs | sed -n '/-/ !p' | sed 'q'`
				if [ "$?" != "0" ] || [ "$zfsbootfs" = "" ] || \
					[ "$zfsbootfs" = "no pools available" ] ; then
					rootok=0
					pool=""

					warn "ZFS: No bootfs attribute found in importable pools."

					# Re-export everything since we're not prepared to take
					# responsibility for them.
					zpool list -H | while read fs rest ; do
						zpool export "$fs"
					done

					return 1
				fi
			fi
			info "ZFS: Using ${zfsbootfs} as root."
		else
                    systemdbeingused=
                    for a in /etc/systemd/system/zpool-import-*.service ; do
                        test -f "$a" && systemdbeingused=1
                    done

		    zfsbootfs="${root#zfs:}"
		    pool="${zfsbootfs%%/*}"
                    if [ -n "$systemdbeingused" ] ; then
			rootok=0
			# systemd is importing the pool, when the pool is imported we mount
			for x in 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0; do
			    info "ZFS: Waiting for ${pool} to be imported by systemd..."
			    if zpool list -H "$pool" > /dev/null 2>&1 ; then
				rootok=1
				break
			    fi
			    sleep 1
			done
			if [ $rootok == 0 ] ; then
			    warn "ZFS: Unable to verify that systemd has imported pool ${pool}."
			    return 1
			fi
                    else
			# Should have an explicit pool set, so just import it and we're done.
			if ! zpool list -H $pool > /dev/null 2>&1 ; then
				# pool wasn't imported automatically by the kernel module, so
				# try it manually.
				rootok=0
				for x in 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0; do
				  info "ZFS: Importing pool ${pool}..."
				  if ! zpool import -N -f ${ZPOOL_NOT_BY_ID} $pool ; then
					warn "ZFS: Unable to import pool ${pool}."
					sleep 1
				  else
					rootok=1
					return 0
				done
			fi
                    fi
		fi

		# Above should have left our rpool imported and pool/dataset in $root.
		# We need zfsutil for non-legacy mounts and not for legacy mounts.
		mountpoint=`zfs get -H -o value mountpoint $zfsbootfs`
		if [ "$mountpoint" = "legacy" ] ; then
			mount -t zfs "$zfsbootfs" "$NEWROOT" && ROOTFS_MOUNTED=yes
		else
			mount -o zfsutil -t zfs "$zfsbootfs" "$NEWROOT" && ROOTFS_MOUNTED=yes
		fi

		# Now we will try to mount /usr early, if there is any /usr partition
		# This will only trigger if /usr is a child file system of the root file system
		zfsusrfs=`zfs list -H -o mountpoint,name | grep '^/usr	' | grep -m 1 -F "	$zfsbootfs" | sed 's|^/usr	||'`
		if [ -n "$zfsusrfs" ] ; then
			# There appears to be a dataset aimed to mount at /usr
			# which is a child of the dataset that goes on /
			if zfs get canmount "$zfsusrfs" | grep -q '  canmount  on' ; then
				mount -o zfsutil -t zfs "$zfsusrfs" "$NEWROOT/usr"
			fi
		fi
		;;
esac

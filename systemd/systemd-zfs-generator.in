#!/bin/bash

set -e

exec >> /dev/kmsg
exec 2>&1

@sbindir@/zpool --help >/dev/null 2>&1 || {
	exit 0
}

scriptname=`basename "$0"`
scriptdir=`dirname "$0"`
cmdline=`cat /proc/cmdline`
echo "$scriptname: ZFS support available"

gendir="$1"
if [ -z "$gendir" ] ; then gendir=/run/systemd/generator ; fi
mkdir -p "$gendir/local-fs.target.requires"

escaper="$scriptdir"/../systemdescaper
[ -x "$escaper" ] || escaper=@systemddir@/systemdescaper
[ -x "$escaper" ] || escaper=./systemdescaper
[ -x "$escaper" ] || escaper=systemdescaper

function escaping() {
	"$escaper" --escape "$1"
}

generate_pool_unit() {

    # import the module of course
echo "[Unit]
Description=ZFS module
DefaultDependencies=no

[Service]
Type=oneshot
ExecStart=/sbin/modprobe zfs zfs_autoimport_disable=1
RemainAfterExit=yes
" > "$gendir"/zfs-module-load.service
        ln -sf ../zfs-module-load.service "$gendir"/local-fs.target.requires/

    # now write the import for the pool
    escapedunit=zpool-import-`escaping "$1"`.service
echo "[Unit]
Description=ZFS pool $1
DefaultDependencies=no
Before=local-fs.target
After=zfs-module-load.service $2
Requires=zfs-module-load.service $2

[Service]
Type=oneshot
ExecStart=@sbindir@/zpool import -f $1
# ExecStop=disabled @sbindir@/zpool export $1 because otherwise the pool does not get reimported on boot
RemainAfterExit=yes
" > "$gendir"/$escapedunit
        ln -sf ../zfs-module-load.service "$gendir"/local-fs.target.requires/
        ln -sf ../$escapedunit "$gendir"/local-fs.target.requires/

}

echo "$scriptname: discovering available ZFS pools for import" >&2
OLDIFS="$IFS"
IFS=
poolname=
deps=
while read everything ; do

    if [ "${everything:0:1}" != " " ] ; then

        # this is a pool name

        if [ -n "$poolname" ] ; then
            if ! zpool list "$poolname" >/dev/null 2>&1 ; then
                # this pool is not imported yet -- save pool info collected before
                generate_pool_unit "$poolname" "$deps"
            fi
        fi

        poolname=`echo "$everything" | sed 's/:$//'`
        deps=

    elif echo "$everything" | grep -q "^ *path: " ; then

        # this is a device path -- quoted weirdly
        # we add it to the list of dependencies for this pool of course
        devname=`echo "$everything" | sed 's/^ *path: //'`
        devname=`eval echo $devname`
        devname=`escaping "$devname"`.device
        deps="$deps $devname"

    fi

done < <(@sbindir@/zdb -C)
if [ -n "$poolname" ] ; then
    if ! zpool list "$poolname" >/dev/null 2>&1 ; then
        # this pool is not imported yet -- save pool info collected before
        generate_pool_unit "$poolname" "$deps"
    fi
fi

IFS="$OLDIFS"
unset OLDIFS

# at this point, we are done telling systemd to import as-of-yet unavailable pools
# and we simply move on to mounting the file systems that are indeed available

function getdeps() {

	mountpoint=`dirname "$1"`
	while true ; do
		if [ "$mountpoint" == "/" ] ; then break ; fi
		if echo "$mountpoints" | grep -Fxq "$mountpoint" ; then
			echo -n `escaping "$mountpoint"`.mount
			echo -n " "
		fi
		mountpoint=`dirname "$mountpoint"`
	done

}

echo "$scriptname: discovering early available ZFS file systems" >&2
listing=`@sbindir@/zfs list -H -o name,mountpoint,canmount`

echo "$scriptname: discovering root ZFS file system" >&2
zfsrootparentfs=
zfsrootparentname=
zfsrootfs=`cat /proc/mounts | grep ' / zfs ' | awk ' { print $1 } ' | head -1` || true
if [ -n "$zfsrootfs" ] ; then
#   zfsrootfs=`fstab-decode echo "$zfsrootfs"`
#   fstab-decode no longer exists, need to find a replacement
#   meanwhile filesystems with spaces in their names won't work
    echo "$scriptname: root ZFS file system is $zfsrootfs"
    zfsrootparentfs=`dirname "$zfsrootfs"`
    zfsrootparentname=`basename "$zfsrootparentfs"`
fi

# we read the output of fstab
# add to the list of our known filesystems
mountpoints=
while read -r ignore mountpoint rest ; do
	if [ "$mountpoint" == "/sysroot" ] ; then continue ; fi
	if [ "$ignore" == "#" ] ; then continue ; fi
	if [ "$mountpoint" == "" ] ; then continue ; fi
        if [ "$mountpoint" == "/" ] ; then continue ; fi
        if [ "$mountpoint" == "swap" ] ; then continue ; fi

#	fstab-decode echo "$mountpoint" >> "$gendir"/mountpoints
#	fstab-decode no longer exists, need to find a replacement
#	meanwhile filesystems with spaces in their names won't work
	mountpoints="$mountpoints
$mountpoint"
done < /etc/fstab

OLDIFS="$IFS"
IFS="	"

# we read the output of zfs list
# add to the list of our known filesystems
while read -r name mountpoint canmount ; do
	if [ "$canmount" != "on" ] ; then continue ; fi
	if [ "$mountpoint" == "/sysroot" ] ; then continue ; fi
	if [ "$mountpoint" == "legacy" ] ; then continue ; fi
	if [ "$mountpoint" == "none" ] ; then continue ; fi

	mountpoints="$mountpoints
$mountpoint"
done < <(echo "$listing")

# we go through the output of zfs list
# and generate all the units
while read -r name mountpoint canmount ; do
	if [ "$canmount" != "on" ] ; then continue ; fi
	if [ "$mountpoint" == "/sysroot" ] ; then continue ; fi
	if [ "$mountpoint" == "legacy" ] ; then continue ; fi
	if [ "$mountpoint" == "none" ] ; then continue ; fi

        # the following logic excludes file systems part of the root pool that are not contained in the root file system
        if [ "$zfsrootparentname" == "ROOT" -o "$zfsrootparentname" == "RPOOL" ] ; then
            if [[ $name == $zfsrootparentfs/* ]] ; then
                if [[ $name != $zfsrootfs/* ]] ; then
                    echo "$scriptname: excluding $name -- it is not contained in root pool $zfsrootfs"
                    continue
                fi
            fi
        fi

	unitname=`escaping "$mountpoint"`.mount
	deps=`getdeps "$mountpoint"`
	extrabefore=
	if [ "$mountpoint" == "/var" ] ; then
		if find /lib/systemd /etc/systemd -type f -name var-run.mount | grep -q var-run.mount ; then
			extrabefore="$extrabefore var-run.mount"
		fi
		if find /lib/systemd /etc/systemd -type f -name var-run.mount | grep -q var-run.mount ; then
			extrabefore="$extrabefore var-lock.mount"
		fi
	fi
	echo -E "$scriptname: discovered mountable ZFS file system $mountpoint, adding to list"

	echo -E "[Unit]
Description=ZFS file system $name
Requires=$deps
Conflicts=umount.target
Before=local-fs.target umount.target$extrabefore
After=local-fs-pre.target $deps
DefaultDependencies=no

[Mount]
What=$name
Where=$mountpoint
Options=zfsutil
Type=zfs
" > "$gendir/$unitname"

	[ -L "$gendir/local-fs.target.requires/$unitname" ] || ln -s "$gendir/$unitname" "$gendir/local-fs.target.requires"

	# end of escaped loop
done < <(echo "$listing")

IFS="$OLDIFS"

# I am done

echo "[Unit]
Description=ZFS service (dummy)

[Service]
Type=oneshot
ExecStart=/bin/true
" > "$gendir"/zfs.service

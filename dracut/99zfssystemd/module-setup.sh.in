#!/bin/sh

. "@dracutdir@"/systemd-escaping.sh

check() {
        if strstr " $mods_to_load " " systemd " ; then
            return 0
        fi
	return 255
}

depends() {
	echo base zfs systemd
	return 0
}

installkernel() {
        return 0
}

get_zvol_device_name() {
    local _pdev
    local a
    local data
    _pdev=$(get_persistent_dev $1 2>/dev/null) || return 0
    data=`udevadm info --query=property --name=$_pdev 2>/dev/null` || return 0
    for a in `echo "$data" | grep ^DEVLINKS= | sed 's/^DEVLINKS=//'` ; do
        if echo "$a" | grep -q '/dev/zvol/' ; then
            echo "$a" | sed 's|^/dev/zvol/||'
            return 0
        fi
    done
}

is_device_required_by_initrd_target() {
    local match
    match=
    for a in "$initdir"/etc/systemd/system/initrd.target.requires/* ; do
        a=`basename "$a" | sed 's|.device$||'`
        b=`systemd_unescape "$a"`
        if [ "$b" == "$1" ] ; then
            match="$b"
            break
        fi
    done
    [ -n "$match" ] && return 0 || return 1
}

set_up_initrd_systemd_for_pool() {
    # This function takes a pool name and inspects it, then after careful
    # inspection, it creates device units for each of its backing devices
    # and creates service units for the pool, linking them together with
    # dependencies.  Finally, the pool unit is linked as a requirement
    # for initrd.target, such that systemd will import the pool.

    # This is better done as a systemd generator inside the initrd, which
    # should completely replace the idiotic and sloppy code in this and
    # the other dracut module.

    local _dev
    local key
    local rest
    local poolnameunit
    local pooldevs

    pooldevs=
    while read key rest ; do
        if [ "$key" == "path:" ] ; then
            _dev=`eval echo $rest`
            _dev=`get_persistent_dev "$_dev"`
            _dev=`systemd_escape "$_dev"`.device
            pooldevs="${pooldevs}${_dev} "
        fi
    done < <(@sbindir@/zdb -C "$1")

    poolnameunit=zpool-import-`systemd_escape "$1"`.service

    echo "[Unit]
Description=ZFS pool $1
DefaultDependencies=no
Requires=dracut-cmdline.service $pooldevs
After=dracut-cmdline.service $pooldevs
Before=initrd.target

[Service]
Type=oneshot
ExecStart=@sbindir@/zpool import -fN $1
# disabling ExecStop=@sbindir@/zpool export $1 because it causes an error
# it's simply not necessary
RemainAfterExit=yes
" > "$initdir"/etc/systemd/system/"$poolnameunit"
    ln -sf ../"$poolnameunit" "$initdir"/etc/systemd/system/initrd.target.requires/

    echo "$poolnameunit"

}

install() {
    # This code executes when the initrd is generated, but only if systemd
    # is inside the initrd and the initrd is hostonly.

    # Here we use systemd by setting up units for the pool and necessary
    # physical devices / datasets that are in the pool and are required
    # for boot, such as swap devices.

    local fs
    local _pdev
    local a
    local b
    local zvoldev
    local pool
    local dev
    local type
    local mntpnt
    local rest
    local rootzfsdev
    local usrzfsdev
    local poolnamunit
    local pdevunit

        if [[ "$hostonly" ]] ; then

    declare -a neededpools

    # First step: determine if any pools contain devices that systemd is
    # going to be waiting on boot

    # are there any physical devices needed for boot that reside on pools?
    for fs in "${host_devs[@]}"; do
        zvoldev=`get_zvol_device_name $fs`
        if [ -n "$zvoldev" ] ; then
            _pdev=$(get_persistent_dev /dev/zvol/$zvoldev 2>/dev/null) || continue
            [ -n "$_pdev" ] || continue
            is_device_required_by_initrd_target "$_pdev" || continue
            # if we reached here then yes, this zvol is needed

            pool=`echo "$zvoldev" | sed 's|/.*||'`

            # now we will create the units representing the pool and
            # all backing devices as well, of course
            poolnameunit=`set_up_initrd_systemd_for_pool "$pool"`

            # this will now link the zvol devices to pool import
            # such that waiting for the zvol devices (as systemd
            # will do on boot) triggers import of the pool, as
            # soon as the devices backing the pool appear
            pdevunit=`systemd_escape "$_pdev"`.device
            mkdir -p \
                "$initdir"/etc/systemd/system/$pdevunit.requires
            ln -sf ../"$poolnameunit" \
                "$initdir"/etc/systemd/system/$pdevunit.requires/
        fi
    done

    # is the root FS a ZFS "device"?
    rootzfsdev=
    usrzfsdev=
    while read dev mntpnt type rest ; do
        if [ "$type" == "zfs" ] ; then
            if [ "$mntpnt" == "/usr" ] ; then
                rootzfsdev="$dev"
            fi
            if [ "$mntpnt" == "/usr" ] ; then
                usrzfsdev="$dev"
            fi
        fi
    done < /etc/mtab
    if [ -n "$rootzfsdev" ] ; then
                # OK, these mountpoints are essential for booting
                # so the pool(s) backing them will also get
                # initialized by systemd
                pool=`echo "$rootzfsdev" | sed 's|/.*||'`
                poolnameunit=`set_up_initrd_systemd_for_pool "$pool"`
    fi
    if [ -n "$usrzfsdev" ] ; then
                # OK, these mountpoints are essential for booting
                # so the pool(s) backing them will also get
                # initialized by systemd
                pool=`echo "$usrzfsdev" | sed 's|/.*||'`
                poolnameunit=`set_up_initrd_systemd_for_pool "$pool"`
    fi

        fi

}
